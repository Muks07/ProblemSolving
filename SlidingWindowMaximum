package com.design.test;

/*Sliding Window Maximum (Maximum of all subarrays of size k)
Given an array and an integer k, find the maximum for each and every contiguous subarray of size k.
 * 
 * Input :
arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6}
k = 3 
Output :
3 3 4 5 5 5 6

Input :
arr[] = {8, 5, 10, 7, 9, 4, 15, 12, 90, 13}
k = 4 
Output :
10 10 10 15 15 90 90
 * 
 * */
public class SlidingWindowMaximum {

	public static int[] getMaximumOfWindow(int[] arr,int k) {
		if(arr==null) {
			return null;
		}
		int len=arr.length;
		int[] maxArray=new int[len-k+1];
		int max=Integer.MIN_VALUE;
		int index=0;
		for(int i=0;i<=len-k;i++)
		{
			System.out.println(arr[i]);
			if(arr[i]>max) {
				max=arr[i];
			}
			for(int j=i+1;j<i+k;j++) {
				if(arr[j]>max) {
					max=arr[j];
				}
			}
			maxArray[index++]=max;
			max=Integer.MIN_VALUE;
	}
		
		return maxArray;
	}
	public static void main(String[] args) {
		//int[] arr={1, 2, 3, 1, 4, 5, 2, 3, 6};
		int arr[] = {8, 5, 10, 7, 9, 4, 15, 12, 90, 13,92};
		int[] maxArray=getMaximumOfWindow(arr,4);
		if(maxArray!=null) {
			for(int i=0;i<maxArray.length;i++) {
				System.out.print(maxArray[i]+" ");
			}
		}
	}
}
